<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: plumber.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
using namespace std;

// struct to store information about tokens
struct Attrib {
  string kind;
  string text;
};

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr, int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

TUBE
	<<
		NLA = TUBE;
	>>

CONNECTOR
	<<
		NLA = CONNECTOR;
	>>

SPLIT
	<<
		NLA = SPLIT;
	>>

MERGE
	<<
		NLA = MERGE;
	>>

LENGTH
	<<
		NLA = LENGTH;
	>>

DIAMETER
	<<
		NLA = DIAMETER;
	>>

WHILE
	<<
		NLA = WHILE;
	>>

ENDWHILE
	<<
		NLA = ENDWHILE;
	>>

NOT
	<<
		NLA = NOT;
	>>

AND
	<<
		NLA = AND;
	>>

OR
	<<
		NLA = OR;
	>>

\(
	<<
		NLA = LPAREN;
	>>

\)
	<<
		NLA = RPAREN;
	>>

,
	<<
		NLA = COMMA;
	>>

\-
	<<
		NLA = MINUS;
	>>

\+
	<<
		NLA = ADD;
	>>

\*
	<<
		NLA = MUL;
	>>

PUSH
	<<
		NLA = PUSH;
	>>

POP
	<<
		NLA = POP;
	>>

TUBEVECTOR OF
	<<
		NLA = ARRAY;
	>>

FULL
	<<
		NLA = FULL;
	>>

EMPTY
	<<
		NLA = EMPTY;
	>>

=
	<<
		NLA = ASSIG;
	>>

>
	<<
		NLA = GT;
	>>

<
	<<
		NLA = LT;
	>>

==
	<<
		NLA = EQ;
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

[a-zA-Z][a-zA-Z0-9]*
	<<
		NLA = ID;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();  
	>>

%%
